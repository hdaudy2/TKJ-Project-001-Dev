@model LoginModel
@using Nop.Core
@using Nop.Core.Domain.Customers

@inject IWebHelper webHelper
@{
    bool isCalledAsHeaderPanel = !string.IsNullOrEmpty(this.Context.Request.Query["isHeaderPanel"]);
    Layout = isCalledAsHeaderPanel ? "" : "_ColumnsOne";

    //title
    NopHtml.AddTitleParts(T("PageTitle.Login").Text);
    //page class
    NopHtml.AppendPageCssClassParts("html-login-page");

    //register URL with return URL (if specified)
    var registerUrl = Url.RouteUrl("Register", new { returnUrl = this.Context.Request.Query["returnUrl"] }, webHelper.GetCurrentRequestProtocol());
}

<div class="page registration-page">
    <div class="page-title">
        <h1>@T("Account.Login.WelcomeAdmin")</h1>
    </div>
    @await Html.PartialAsync("_ExternalAuthentication.Errors")
    <div class="page-body">
        <form asp-route="LoginAdmin" asp-route-returnurl="@Context.Request.Query["ReturnUrl"]" method="post" autocomplete="off">
            <div asp-validation-summary="ModelOnly" class="message-error" style="padding: 3%;">
                @T("Account.Login.Unsuccessful")
            </div>
            <div class="fieldset">
                <div class="form-fields">
                    @if (Model.UsernamesEnabled)
                    {
                        <div class="inputs">
                            <label asp-for="Username" asp-postfix=":"></label>
                            <input asp-for="Username" class="username" autofocus="autofocus" />
                            <span class="inputs-icons">&#x61;</span>
                            <span asp-validation-for="Username"></span>
                        </div>
                    }
                    else
                    {
                        <div class="inputs">
                            <label asp-for="Email" asp-postfix=":"></label>
                            <input asp-for="Email" class="email" autofocus="autofocus" />
                            <span class="inputs-icons">&#x41;</span>
                            <span asp-validation-for="Email"></span>
                        </div>
                    }
                    <div class="inputs">
                        <label asp-for="Password" asp-postfix=":"></label>
                        <input asp-for="Password" class="password" />
                        <span class="inputs-icons">&#x78;</span>
                        <span asp-validation-for="Password"></span>
                    </div>
                    <div style="margin: 3% 0%; display: flex;">
                        <div style="flex-grow: 1; text-align: left;">
                            <input asp-for="RememberMe" />
                            <label asp-for="RememberMe"></label>
                        </div>
                        <span class="forgot-password" style="flex-grow: 1; text-align: right;">
                            <a asp-route="PasswordRecovery">@T("Account.Login.ForgotPassword")</a>
                        </span>
                    </div>
                    @if (Model.DisplayCaptcha)
                    {
                        <nop-captcha />
                    }
                </div>
            </div>
            <div class="buttons">
                <button type="submit" class="button-1 login-button">@T("Account.Login.LoginButton")</button>
            </div>
        </form>
        <div class="external-authentication">
            @await Component.InvokeAsync("ExternalMethods", "ExternalAuthentication")
        </div>
    </div>
</div>